August 2020 release of PcapPlusPlus (v20.08)
============================================

PcapPlusPlus web-site:  https://pcapplusplus.github.io/

GitHub page:            https://github.com/seladb/PcapPlusPlus


This package contains:
----------------------

 - PcapPlusPlus compiled libraries
    - Common++.lib
    - Packet++.lib
    - Pcap++.lib
 - These libraries are compiled in 4 different configurations (each containing all libraries above):
    - 32bit debug configuration (`x86\Debug`)
    - 32bit release configuration (`x86\Release`)
    - 64bit debug configuration (`x64\Debug`)
    - 64bit release configuration (`x64\Release`)
 - PcapPlusPlus header files (under `header\`)
 - Compiled examples:
    - 32bit executables (under `x86\examples`)
    - 64bit executables (under `x64\examples`)
 - Visual Studio example solution configured to work with PcapPlusPlus compiled binaries (under `ExampleProject\`)


Running the examples:
---------------------

 - Make sure you have WinPcap, Npcap or Wireshark installed
 - Make sure you have Visual C++ Redistributable for Visual Studio installed
 - If examples still don't run, install Visual C++ Redistributable for Visual Studio 2010 also


In order to compile your application with these binaries you need to:
---------------------------------------------------------------------

 - Make sure you have Microsoft Visual Studio installed
 - Make sure you have WinPcap or Npcap Developer's pack installed (WinPcap Dev Pack can be downloaded from https://www.winpcap.org/devel.htm, Npcap SDK can be downloaded from https://nmap.org/npcap/#download)
 - Make sure you have pthread-win32 (can be downloaded from: https://github.com/seladb/PcapPlusPlus-Deploy/raw/master/Packages/pthreads-w32-2-9-1-release.zip)
 - You need to add to your project all of the include and binary paths required for PcapPlusPlus. The best option is to copy the configuration of the ExampleProject (under `ExampleProject\` folder). Another option
   is to use the ExampleProject solution, delete all the code from it and start writing your own code
 - Before using the ExampleProject solution please make sure you update the following details in `PcapPlusPlusPropertySheet.props` file (inside `ExampleProject\` folder):
    - Set the value of the `PcapPlusPlusHome` to the folder where PcapPlusPlus binaries package is located (the one you downloaded)
    - Set the value of the `PcapSdkHome` to the folder where WinPcap/Npcap Developer's Pack is located
    - Set the value of the `PThreadWin32Home` to the folder where pthread-win32 is located
 - Now you can load the solution and build it. You can switch between Debug/Release and x86/x64 configurations
 - If you get an error of `The Windows SDK version 8.1 is not found` follow these steps:
    - Right click on `ExampleProject` project -> Choose "Properties"
    - Go to "Configuration Properties" -> "General"
    - Open the drop down list next to "Windows SDK version" and choose the version installed on your machine
 - Build result will be in `ExampleProject\Debug` or `ExampleProject\Release` (according to chosen configuration)


Release notes (changes from v19.12)
-----------------------------------

 - Major security and quality improvements:
   - PcapPlusPlus was added to [Google OSS-Fuzz](https://google.github.io/oss-fuzz/) which uses the [Fuzz testing](https://en.wikipedia.org/wiki/Fuzzing) technique to discover security vulnerabilities and stability bugs (thank you @zlowram !)
   - Created a new regression test suite for OSS-Fuzz bugfixes under [`Tests/Fuzzers/RegressionTests`](https://github.com/seladb/PcapPlusPlus/tree/master/Tests/Fuzzers/RegressionTests) (thank you @zlowram !)
   - Added [LGTM](https://lgtm.com/projects/g/seladb/PcapPlusPlus) integration to enable continuous code analysis and prevent critical vulnerabilities (thank you @alexey-tereshenkov-oxb !)
   - More than 60 issues were found by OSS-Fuzz and LGTM and fixed in this release
   - Revamped Packet++Test and Pcap++Test: tests are now more structured, divided into multiple files and use common and more intuitive test infrastructure
   - Added a new test suite (written in Python) for [PcapPlusPlus examples](https://github.com/seladb/PcapPlusPlus/tree/master/Examples) under [`Tests/ExamplesTests`](https://github.com/seladb/PcapPlusPlus/tree/master/Tests/ExamplesTest)
 - Added [Npcap](https://nmap.org/npcap/) support for Windows (in parallel to WinPcap support)
 - Added DPDK 19.11 (LTS) support
 - New supported protocols:
   - BGP v4
   - IEEE 802.3 Ethernet
 - New platforms officially supported:
   - MacOS Catalina (10.15)
   - Ubuntu 20.04
 - A complete rewrite of the IP address classes `IPv4Address`, `IPv6Address` and `IPAddress` to make them more efficient and easy to use (thank you @gx740 !)
 - In addition, new features were added to IP address classes:
   - Added "less than" comparison operator (thank you @maruu !)
   - Added subnet match for `IPv6Address` (thank you @DinoStray !)
 - Performance optimization, readability improvements and code cleanup in various parts of the code (thank you @maruu and @gx740 !)
 - Integrated streaming ZStd compression for pcapng files (thank you @Dysl3xik !)
 - Pcap/pcapng files:
   - Read and write in nanoseconds precision for pcapng files (thank you @akvinikym !)
   - Enable `flush` for pcap and pcapng file writers (thank you @rickyzhang82 and @l-henken !)
 - TCP reassembly returns status in every call to `TcpReassembly::reassemblePacket()` (thank you @starliiit !) 
 - Added port filter to `HttpAnalyzer` (thank you @makefriend8 !)
 - Support for setting snapshot length in `PcapLiveDevice` (thank you @wongsingfo !)
 - `GeneralFilter::matchPacketWithFilter()` can now match packet of any link type (thank you @skorup101 !)
 - Added user link types 147-162 to support custom protocols (thank you @l-henken !)
 - Tons of bug fixes (thank you everyone who reported issues and contributed bugfixes!)


Contributors
------------

Thank you for everyone who contributed to this release:

 - @gx740 
 - @Dysl3xik 
 - @maruu 
 - @zlowram 
 - @akvinikym
 - @alexey-tereshenkov-oxb 
 - @rickyzhang82 
 - @DinoStray 
 - @l-henken 
 - @skorup101 
 - @starliiit 
 - @NanXiao 
 - @makefriend8
 - @v0l0dia
 - @wongsingfo 
 - @mchuahua
 - @NinethDimension
 - @OrkunTokdemir
 - @fquinner